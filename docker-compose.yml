services:
  laravel:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_app
    volumes:
      - ./backend:/var/www/html
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - BROADCAST_DRIVER=${BROADCAST_DRIVER}
      - REVERB_APP_ID=${REVERB_APP_ID}
      - REVERB_APP_KEY=${REVERB_APP_KEY}
      - REVERB_APP_SECRET=${REVERB_APP_SECRET}
      - REVERB_HOST=${REVERB_HOST}
      - REVERB_PORT=${REVERB_PORT}
      - REVERB_SCHEME=${REVERB_SCHEME}
    networks:
      - app_network

  websockets:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_websockets
    volumes:
      - ./backend:/var/www/html
    command: php artisan reverb:start --host=0.0.0.0 --port=6001
    ports:
      - "6001:6001"
    depends_on:
      - laravel
      - redis
    networks:
      - app_network

  vue:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vue_app
    volumes:
      - ./frontend:/app
      - vue_node_modules:/app/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=${NODE_ENV}
      - VITE_REVERB_HOST=${VITE_REVERB_HOST}
      - VITE_REVERB_PORT=${VITE_REVERB_PORT}
      - VITE_REVERB_KEY=${VITE_REVERB_KEY}
      - VITE_REVERB_SCHEME=${VITE_REVERB_SCHEME}
    command: npm run dev -- --host
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/usr/share/nginx/html
      - ./backend/public:/var/www/html/public
    depends_on:
      - laravel
      - vue
      - websockets
    networks:
      - app_network

  horizon:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_horizon
    volumes:
      - ./backend:/var/www/html
    command: php /var/www/html/artisan horizon
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - QUEUE_CONNECTION=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
    networks:
      - app_network

  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_scheduler
    volumes:
      - ./backend:/var/www/html
    command: bash -c "while [ true ]; do php /var/www/html/artisan schedule:run; sleep 60; done"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - QUEUE_CONNECTION=redis
    networks:
      - app_network

  rabbitmq_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_rabbitmq_worker
    volumes:
      - ./backend:/var/www/html
    command: php /var/www/html/artisan queue:work rabbitmq --queue=statistics
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
    networks:
      - app_network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      - PMA_HOST=${PMA_HOST}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app_network

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

volumes:
  vue_node_modules:
  mysql_data:
  redis_data:
  rabbitmq_data:

networks:
  app_network:
    driver: bridge