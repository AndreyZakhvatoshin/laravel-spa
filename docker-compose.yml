services:
  laravel:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_app
    # ❗ В продакшене код внутри образа — volumes НЕ монтируем
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=/
      - RABBITMQ_QUEUE=statistics
      - BROADCAST_DRIVER=reverb
      - REVERB_HOST=laravel_websockets
      - REVERB_PORT=6001
      - REVERB_SCHEME=http
    healthcheck:
      test: ["CMD", "php", "artisan", "cache:clear"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  websockets:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_websockets
    command: php artisan reverb:start --host=0.0.0.0 --port=6001
    # ❗ Порт 6001 не публикуется — доступ через nginx
    depends_on:
      - laravel
      - redis
    networks:
      - app_network

  vue:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vue_app
    # ❗ В продакшене — отдаём статику через nginx, здесь просто запускаем сервер для внутреннего использования
    command: npx serve -s /app/dist -p 8080
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/usr/share/nginx/html
      - ./backend/public:/var/www/html/public
    depends_on:
      - laravel
    networks:
      - app_network

  horizon:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_horizon
    command: php artisan horizon
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
    networks:
      - app_network

  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_scheduler
    command: php artisan schedule:work
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
    networks:
      - app_network

  rabbitmq_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel_rabbitmq_worker
    command: php artisan queue:work rabbitmq --queue=statistics --sleep=3 --tries=3
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=/
      - RABBITMQ_QUEUE=statistics
    networks:
      - app_network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:7.2-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

volumes:
  mysql_data:
  redis_data:
  rabbitmq_data:

networks:
  app_network:
    driver: bridge